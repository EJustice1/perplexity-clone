services:
  # Backend service - FastAPI with uvicorn
  backend:
    build:
      context: ../../backend
      dockerfile: Dockerfile
      target: production
    image: perplexity-clone:latest
    container_name: perplexity-backend
    restart: unless-stopped
    
    # Port mapping for backend
    ports:
      - "8000:8000"
    
    # Environment variables for backend
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - API_HOST=0.0.0.0
      - API_PORT=8000
    
    # Health check for backend
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    
    # Security options
    security_opt:
      - no-new-privileges:true
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    
    # Network configuration
    networks:
      - perplexity-network
    
    # Command to run only backend
    command: ["python", "-m", "uvicorn", "src.api.main:app", "--host", "0.0.0.0", "--port", "8000"]

  # Frontend service - Next.js
  frontend:
    build:
      context: ../../frontend
      dockerfile: Dockerfile
    image: perplexity-frontend:latest
    container_name: perplexity-frontend
    restart: unless-stopped
    
    # Port mapping for frontend
    ports:
      - "3000:3000"
    
    # Environment variables for frontend
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend:8000
      - PORT=3000
    
    # Health check for frontend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    
    # Security options
    security_opt:
      - no-new-privileges:true
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    
    # Network configuration
    networks:
      - perplexity-network
    
    # No command override - use Dockerfile CMD

  # Prometheus service for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: perplexity-prometheus
    restart: unless-stopped
    
    # Port mapping for Prometheus
    ports:
      - "9090:9090"
    
    # Volume for Prometheus configuration and alerts
    volumes:
      - ../monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ../monitoring/alerts.yml:/etc/prometheus/alerts.yml:ro
      - prometheus_data:/prometheus
    
    # Command with configuration
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    
    # Network configuration
    networks:
      - perplexity-network
    
    # Health check
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana service for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: perplexity-grafana
    restart: unless-stopped
    
    # Port mapping for Grafana
    ports:
      - "3001:3000"
    
    # Environment variables for Grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    
    # Volume for Grafana data and provisioning
    volumes:
      - grafana_data:/var/lib/grafana
      - ../monitoring/provisioning:/etc/grafana/provisioning:ro
      - ../monitoring/dashboards:/var/lib/grafana/dashboards:ro
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    
    # Network configuration
    networks:
      - perplexity-network
    
    # Health check
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    # Depends on Prometheus
    depends_on:
      prometheus:
        condition: service_healthy

networks:
  perplexity-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
