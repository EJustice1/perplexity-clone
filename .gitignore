# ===== PYTHON BACKEND =====

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# ===== NODE.JS FRONTEND =====

# Dependency directories
node_modules/
jspm_packages/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env.test
.env.local
.env.development.local
.env.test.local
.env.production.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next/
out/
build/

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
public

# Storybook build outputs
.out
.storybook-out

# ===== FRONTEND BUILD TOOLS =====

# Vite
dist/
dist-ssr/
*.local

# Rollup
.rollup.cache/

# Webpack
.webpack/

# ===== PACKAGE MANAGERS =====

# npm
package-lock.json
.npmrc

# Yarn
yarn.lock
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/sdks
!.yarn/versions

# pnpm
pnpm-lock.yaml
.pnpm-store/

# ===== TESTING =====

# Jest
coverage/
.nyc_output/
.jest/

# Playwright
test-results/
playwright-report/
playwright/.cache/

# Cypress
cypress/videos/
cypress/screenshots/
cypress/downloads/

# ===== DEVELOPMENT TOOLS =====

# Turbo
.turbo/

# Nx
.nx/

# Storybook
storybook-static/

# ===== ENVIRONMENT & SECRETS =====

# Environment files
.env*
!.env.example

# Secrets
.secrets
secrets/

# ===== MONITORING & LOGS =====

# Prometheus data
prometheus_data/

# Grafana data
grafana_data/

# Application logs
logs/
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Runtime data
pids/
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/
*.lcov

# nyc test coverage
.nyc_output

# ===== DOCKER & CONTAINERS =====

# Docker
.dockerignore
docker-compose.override.yml
*.env

# Container data
container_data/
docker_data/

# ===== INFRASTRUCTURE =====

# Terraform
*.tfstate
*.tfstate.*
*.tfvars
*.tfvars.json
.terraform/
.terraform.lock.hcl
.terraformrc
terraform.rc

# Kubernetes
*.kubeconfig
kubeconfig

# ===== IDE & EDITOR =====

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For a PyCharm
#  project, it is recommended to include the following files:
#  .idea/
#  *.iml
#  *.ipr
#  *.iws
.idea/
*.iml
*.ipr
*.iws

# VS Code
.vscode/
*.code-workspace

# Vim
*.swp
*.swo
*~

# Emacs
*~
\#*\#
/.emacs.desktop
/.emacs.desktop.lock
*.elc
auto-save-list
tramp
.\#*

# Sublime Text
*.sublime-project
*.sublime-workspace

# ===== TEMPORARY FILES =====

# Temporary folders
tmp/
temp/

# Editor directories and files
*.swp
*.swo
*~

# Local configuration files
config.local.*
settings.local.*

# ===== OS GENERATED FILES =====

# macOS
.DS_Store
.AppleDouble
.LSOverride
Icon
._*
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

# Windows
Thumbs.db
Thumbs.db:encryptable
ehthumbs.db
ehthumbs_vista.db
*.tmp
*.temp
Desktop.ini
$RECYCLE.BIN/
*.cab
*.msi
*.msix
*.msm
*.msp
*.lnk

# Linux
*~
.fuse_hidden*
.directory
.Trash-*
.nfs*

# ===== PROJECT SPECIFIC =====

# Local development files
*.local
local.*

# Build artifacts
build/
dist/
*.tar.gz
*.zip

# Cache directories
.cache/
cache/

# Backup files
*.bak
*.backup
*.old

# ===== CI/CD =====

# GitHub Actions
.github/workflows/.env
.github/workflows/secrets/

# GitLab CI
.gitlab-ci.yml.local

# ===== DATABASE =====

# SQLite
*.db
*.sqlite
*.sqlite3

# PostgreSQL
*.sql

# ===== SECURITY =====

# SSH keys
*.pem
*.key
*.p12
*.pfx

# Certificates
*.crt
*.cer
*.der

# ===== ARCHIVE FILES =====

# Compressed files
*.7z
*.dmg
*.gz
*.iso
*.jar
*.rar
*.tar
*.zip

# ===== MEDIA FILES =====

# Images (if not needed in repo)
*.png
*.jpg
*.jpeg
*.gif
*.bmp
*.tiff
*.svg

# Videos
*.mp4
*.avi
*.mov
*.wmv
*.flv

# Audio
*.mp3
*.wav
*.flac
*.aac
