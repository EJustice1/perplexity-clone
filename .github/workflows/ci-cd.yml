name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: dev
        type: choice
        options:
        - dev
        - staging
        - prod

env:
  PROJECT_ID: ${{ vars.PROJECT_ID || 'perplexity-clone-468820' }}
  REGION: ${{ vars.REGION || 'us-central1' }}
  ARTIFACT_REGISTRY: ${{ vars.REGION || 'us-central1' }}-docker.pkg.dev
  REPOSITORY_NAME: perplexity-clone-repository
  BACKEND_SERVICE: perplexity-clone-backend
  FRONTEND_SERVICE: perplexity-clone-frontend
  DISPATCHER_SERVICE: perplexity-clone-dispatcher
  WORKER_SERVICE: perplexity-clone-worker

permissions:
  contents: read
  actions: read
  packages: write
  id-token: write

jobs:
  backend-build:
    name: Backend Build
    runs-on: ubuntu-latest
    outputs:
      image_sha: ${{ steps.tags.outputs.sha }}
      image_latest: ${{ steps.tags.outputs.latest }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
      - name: Configure Artifact Registry auth
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet
      - name: Compute backend image tags
        id: tags
        env:
          ARTIFACT_REGISTRY: ${{ env.ARTIFACT_REGISTRY }}
          PROJECT_ID: ${{ env.PROJECT_ID }}
          REPOSITORY_NAME: ${{ env.REPOSITORY_NAME }}
        run: |
          SHA="${ARTIFACT_REGISTRY}/${PROJECT_ID}/${REPOSITORY_NAME}/backend:${GITHUB_SHA}"
          LATEST="${ARTIFACT_REGISTRY}/${PROJECT_ID}/${REPOSITORY_NAME}/backend:latest"
          echo "sha=$SHA" >> "$GITHUB_OUTPUT"
          echo "latest=$LATEST" >> "$GITHUB_OUTPUT"
      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          platforms: linux/amd64
          tags: |
            ${{ steps.tags.outputs.sha }}
            ${{ steps.tags.outputs.latest }}

  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: backend-build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run pytest suite
        run: |
          cd backend
          python -m pytest tests/ -v --tb=short

  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: 
      - frontend-build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: npm
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci --prefer-offline --no-audit
      - name: Run frontend unit tests
        run: |
          cd frontend
          npm test -- --watch=false

  frontend-build:
    name: Frontend Build
    runs-on: ubuntu-latest
    needs:
      - backend-test
    outputs:
      image_sha: ${{ steps.tags.outputs.sha }}
      image_latest: ${{ steps.tags.outputs.latest }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: npm
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci --prefer-offline --no-audit
      - name: Build frontend bundle
        run: |
          cd frontend
          npm run build
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
      - name: Configure Artifact Registry auth
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet
      - name: Resolve backend URL for build
        id: backend-url
        run: |
          gcloud config set run/region ${{ env.REGION }} --quiet
          URL=$(gcloud run services describe ${{ env.BACKEND_SERVICE }} --region=${{ env.REGION }} --format="value(status.url)" 2>/dev/null || echo "https://placeholder-backend-url.run.app")
          echo "value=$URL" >> "$GITHUB_OUTPUT"
      - name: Compute frontend image tags
        id: tags
        env:
          ARTIFACT_REGISTRY: ${{ env.ARTIFACT_REGISTRY }}
          PROJECT_ID: ${{ env.PROJECT_ID }}
          REPOSITORY_NAME: ${{ env.REPOSITORY_NAME }}
        run: |
          SHA="${ARTIFACT_REGISTRY}/${PROJECT_ID}/${REPOSITORY_NAME}/frontend:${GITHUB_SHA}"
          LATEST="${ARTIFACT_REGISTRY}/${PROJECT_ID}/${REPOSITORY_NAME}/frontend:latest"
          echo "sha=$SHA" >> "$GITHUB_OUTPUT"
          echo "latest=$LATEST" >> "$GITHUB_OUTPUT"
      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          platforms: linux/amd64
          build-args: |
            NEXT_PUBLIC_API_URL=${{ steps.backend-url.outputs.value }}
          tags: |
            ${{ steps.tags.outputs.sha }}
            ${{ steps.tags.outputs.latest }}

  worker-build:
    name: Worker Build
    runs-on: ubuntu-latest
    needs: backend-test
    outputs:
      image_sha: ${{ steps.tags.outputs.sha }}
      image_latest: ${{ steps.tags.outputs.latest }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
      - name: Configure Artifact Registry auth
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet
      - name: Compute worker image tags
        id: tags
        env:
          ARTIFACT_REGISTRY: ${{ env.ARTIFACT_REGISTRY }}
          PROJECT_ID: ${{ env.PROJECT_ID }}
          REPOSITORY_NAME: ${{ env.REPOSITORY_NAME }}
        run: |
          SHA="${ARTIFACT_REGISTRY}/${PROJECT_ID}/${REPOSITORY_NAME}/worker:${GITHUB_SHA}"
          LATEST="${ARTIFACT_REGISTRY}/${PROJECT_ID}/${REPOSITORY_NAME}/worker:latest"
          echo "sha=$SHA" >> "$GITHUB_OUTPUT"
          echo "latest=$LATEST" >> "$GITHUB_OUTPUT"
      - name: Build and push worker image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          platforms: linux/amd64
          tags: |
            ${{ steps.tags.outputs.sha }}
            ${{ steps.tags.outputs.latest }}

  dispatcher-build:
    name: Dispatcher Build
    runs-on: ubuntu-latest
    needs: backend-test
    outputs:
      image_sha: ${{ steps.tags.outputs.sha }}
      image_latest: ${{ steps.tags.outputs.latest }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
      - name: Configure Artifact Registry auth
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet
      - name: Compute dispatcher image tags
        id: tags
        env:
          ARTIFACT_REGISTRY: ${{ env.ARTIFACT_REGISTRY }}
          PROJECT_ID: ${{ env.PROJECT_ID }}
          REPOSITORY_NAME: ${{ env.REPOSITORY_NAME }}
        run: |
          SHA="${ARTIFACT_REGISTRY}/${PROJECT_ID}/${REPOSITORY_NAME}/dispatcher:${GITHUB_SHA}"
          LATEST="${ARTIFACT_REGISTRY}/${PROJECT_ID}/${REPOSITORY_NAME}/dispatcher:latest"
          echo "sha=$SHA" >> "$GITHUB_OUTPUT"
          echo "latest=$LATEST" >> "$GITHUB_OUTPUT"
      - name: Build and push dispatcher image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          platforms: linux/amd64
          tags: |
            ${{ steps.tags.outputs.sha }}
            ${{ steps.tags.outputs.latest }}

  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs:
      - worker-build
      - dispatcher-build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
      - name: Run smoke checks
        run: |
          gcloud config set run/region ${{ env.REGION }} --quiet
          DISPATCHER_JOB=$(gcloud scheduler jobs list --location=${{ env.REGION }} --filter="name:dispatcher-weekly" --format="value(name)" | head -n 1)
          if [ -n "$DISPATCHER_JOB" ]; then
            JOB_ID=${DISPATCHER_JOB##*/}
            echo "Triggering scheduler job $JOB_ID"
            gcloud scheduler jobs run "$JOB_ID" --location=${{ env.REGION }}
          else
            echo "⚠️  Dispatcher scheduler job not found; skipping trigger"
          fi
          WORKER_URL=$(gcloud run services describe ${{ env.WORKER_SERVICE }} --region=${{ env.REGION }} --format="value(status.url)" 2>/dev/null || echo "")
          if [ -n "$WORKER_URL" ]; then
            echo "Worker placeholder smoke"
            curl -fsS "$WORKER_URL" || true
          else
            echo "⚠️  Worker URL not available; skipping"
          fi

  all-tests:
    name: Comprehensive Tests
    runs-on: ubuntu-latest
    needs:
      - backend-test
      - frontend-test
      - smoke-tests
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
      - name: Resolve service URLs
        id: urls
        run: |
          gcloud config set run/region ${{ env.REGION }} --quiet
          BACKEND_URL=$(gcloud run services describe ${{ env.BACKEND_SERVICE }} --region=${{ env.REGION }} --format="value(status.url)")
          FRONTEND_URL=$(gcloud run services describe ${{ env.FRONTEND_SERVICE }} --region=${{ env.REGION }} --format="value(status.url)")
          DISPATCHER_URL=$(gcloud run services describe ${{ env.DISPATCHER_SERVICE }} --region=${{ env.REGION }} --format="value(status.url)" 2>/dev/null || echo "")
          WORKER_URL=$(gcloud run services describe ${{ env.WORKER_SERVICE }} --region=${{ env.REGION }} --format="value(status.url)" 2>/dev/null || echo "")
          echo "backend=$BACKEND_URL" >> "$GITHUB_OUTPUT"
          echo "frontend=$FRONTEND_URL" >> "$GITHUB_OUTPUT"
          echo "dispatcher=$DISPATCHER_URL" >> "$GITHUB_OUTPUT"
          echo "worker=$WORKER_URL" >> "$GITHUB_OUTPUT"
      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r .github/scripts/requirements.txt
      - name: Run API and service tests
        run: |
          python .github/scripts/test-api.py "${{ steps.urls.outputs.backend }}" "${{ steps.urls.outputs.frontend }}" "${{ steps.urls.outputs.dispatcher }}" "${{ steps.urls.outputs.worker }}"

  deploy:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    needs:
      - backend-build
      - frontend-build
      - worker-build
      - dispatcher-build
      - all-tests
    env:
      TF_VAR_backend_image: ${{ needs.backend-build.outputs.image_sha }}
      TF_VAR_frontend_image: ${{ needs.frontend-build.outputs.image_sha }}
      TF_VAR_worker_image: ${{ needs.worker-build.outputs.image_sha }}
      TF_VAR_dispatcher_image: ${{ needs.dispatcher-build.outputs.image_sha }}
      TF_VAR_environment: ${{ github.event.inputs.environment || 'dev' }}
      TF_VAR_serper_api_key: ${{ secrets.SERPER_API_KEY }}
      TF_VAR_google_ai_api_key: ${{ secrets.GOOGLE_AI_API_KEY }}
      TF_VAR_smtp_host: ${{ secrets.SMTP_HOST }}
      TF_VAR_smtp_port: ${{ secrets.SMTP_PORT }}
      TF_VAR_smtp_username: ${{ secrets.SMTP_USERNAME }}
      TF_VAR_smtp_password: ${{ secrets.SMTP_PASSWORD }}
      TF_VAR_smtp_from: ${{ secrets.SMTP_FROM }}
      TF_VAR_smtp_use_tls: ${{ secrets.SMTP_USE_TLS }}
      TF_VAR_scheduler_dispatcher_uri: ${{ vars.SCHEDULER_DISPATCHER_URI || '' }}
      TF_VAR_psa_prefix_length: ${{ vars.PSA_PREFIX_LENGTH || 16 }}
    outputs:
      backend_url: ${{ steps.capture.outputs.backend-url }}
      frontend_url: ${{ steps.capture.outputs.frontend-url }}
      dispatcher_url: ${{ steps.capture.outputs.dispatcher-url }}
      worker_url: ${{ steps.capture.outputs.worker-url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7
      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
      - name: Terraform init
        run: |
          cd infrastructure
          terraform init -input=false
      - name: Terraform plan
        run: |
          cd infrastructure
          terraform plan -input=false -out=tfplan
      - name: Terraform apply
        run: |
          cd infrastructure
          terraform apply -input=false -auto-approve tfplan
      - name: Capture Terraform outputs
        id: capture
        run: |
          cd infrastructure
          echo "backend-url=$(terraform output -raw backend_url)" >> "$GITHUB_OUTPUT"
          echo "frontend-url=$(terraform output -raw frontend_url)" >> "$GITHUB_OUTPUT"
          echo "dispatcher-url=$(terraform output -raw dispatcher_url)" >> "$GITHUB_OUTPUT"
          echo "worker-url=$(terraform output -raw worker_url)" >> "$GITHUB_OUTPUT"

  verification:
    name: Verification
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    needs: deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
      - name: Verify frontend and backend
        env:
          FRONTEND_URL: ${{ needs.deploy.outputs.frontend_url }}
          BACKEND_URL: ${{ needs.deploy.outputs.backend_url }}
        run: |
          echo "Frontend: $FRONTEND_URL"
          curl -fsS "$FRONTEND_URL" >/dev/null
          TOKEN=$(gcloud auth print-identity-token --audiences="$BACKEND_URL")
          curl -fsS -H "Authorization: Bearer $TOKEN" "$BACKEND_URL/health" >/dev/null
      - name: Summary
        run: |
          {
            echo "## ✅ Deployment Verification"
            echo "- Backend: ${{ needs.deploy.outputs.backend_url }}"
            echo "- Frontend: ${{ needs.deploy.outputs.frontend_url }}"
            echo "- Dispatcher: ${{ needs.deploy.outputs.dispatcher_url }}"
            echo "- Worker: ${{ needs.deploy.outputs.worker_url }}"
          } >> $GITHUB_STEP_SUMMARY
