name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: dev
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  PROJECT_ID: ${{ vars.PROJECT_ID || 'perplexity-clone-468820' }}
  REGION: ${{ vars.REGION || 'us-central1' }}
  ARTIFACT_REGISTRY: ${{ vars.REGION || 'us-central1' }}-docker.pkg.dev
  REPOSITORY_NAME: perplexity-clone-repository
  BACKEND_SERVICE: perplexity-clone-backend
  FRONTEND_SERVICE: perplexity-clone-frontend
  DISPATCHER_SERVICE: perplexity-clone-dispatcher
  WORKER_SERVICE: perplexity-clone-worker

permissions:
  contents: read
  actions: read
  packages: write
  id-token: write

jobs:
  backend:
    name: Backend Build & Test
    runs-on: ubuntu-latest
    outputs:
      backend-image: ${{ steps.image-tags.outputs.sha }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install backend dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio httpx

      - name: Run backend tests
        run: |
          cd backend
          python -m pytest tests/ -v --tb=short

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: Set backend image tags
        id: image-tags
        run: |
          SHA_TAG=${{ env.ARTIFACT_REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/backend:${{ github.sha }}
          LATEST_TAG=${{ env.ARTIFACT_REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/backend:latest
          echo "sha=$SHA_TAG" >> $GITHUB_OUTPUT
          echo "latest=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          platforms: linux/amd64
          tags: |
            ${{ steps.image-tags.outputs.sha }}
            ${{ steps.image-tags.outputs.latest }}

  dispatcher:
    name: Dispatcher Build
    runs-on: ubuntu-latest
    needs: backend
    outputs:
      dispatcher-image: ${{ steps.image-tags.outputs.sha }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: Set dispatcher image tags
        id: image-tags
        run: |
          SHA_TAG=${{ env.ARTIFACT_REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/dispatcher:${{ github.sha }}
          LATEST_TAG=${{ env.ARTIFACT_REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/dispatcher:latest
          echo "sha=$SHA_TAG" >> $GITHUB_OUTPUT
          echo "latest=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Build and push dispatcher image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          platforms: linux/amd64
          tags: |
            ${{ steps.image-tags.outputs.sha }}
            ${{ steps.image-tags.outputs.latest }}

  worker:
    name: Worker Build
    runs-on: ubuntu-latest
    needs: backend
    outputs:
      worker-image: ${{ steps.image-tags.outputs.sha }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: Set worker image tags
        id: image-tags
        run: |
          SHA_TAG=${{ env.ARTIFACT_REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/worker:${{ github.sha }}
          LATEST_TAG=${{ env.ARTIFACT_REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/worker:latest
          echo "sha=$SHA_TAG" >> $GITHUB_OUTPUT
          echo "latest=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Build and push worker image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          platforms: linux/amd64
          tags: |
            ${{ steps.image-tags.outputs.sha }}
            ${{ steps.image-tags.outputs.latest }}

  frontend:
    name: Frontend Build & Test
    runs-on: ubuntu-latest
    needs: backend
    outputs:
      frontend-image: ${{ steps.image-tags.outputs.sha }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci --prefer-offline --no-audit

      - name: Run frontend checks
        run: |
          cd frontend
          npm run lint --if-present
          npm run test --if-present

      - name: Build frontend assets
        run: |
          cd frontend
          npm run build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Resolve backend URL for build
        id: backend-url
        run: |
          gcloud config set run/region ${{ env.REGION }} --quiet
          URL=$(gcloud run services describe ${{ env.BACKEND_SERVICE }} --region=${{ env.REGION }} --format="value(status.url)" 2>/dev/null || echo "")
          if [ -z "$URL" ]; then
            echo "Backend service not found, using placeholder URL"
            URL="https://placeholder-backend-url.run.app"
          else
            echo "Backend URL: $URL"
          fi
          echo "value=$URL" >> $GITHUB_OUTPUT

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: Set frontend image tags
        id: image-tags
        run: |
          SHA_TAG=${{ env.ARTIFACT_REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/frontend:${{ github.sha }}
          LATEST_TAG=${{ env.ARTIFACT_REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/frontend:latest
          echo "sha=$SHA_TAG" >> $GITHUB_OUTPUT
          echo "latest=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          platforms: linux/amd64
          build-args: |
            NEXT_PUBLIC_API_URL=${{ steps.backend-url.outputs.value }}
          tags: |
            ${{ steps.image-tags.outputs.sha }}
            ${{ steps.image-tags.outputs.latest }}

  deploy:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs:
      - backend
      - dispatcher
      - worker
      - frontend
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    outputs:
      backend-url: ${{ steps.tf-outputs.outputs.backend-url }}
      frontend-url: ${{ steps.tf-outputs.outputs.frontend-url }}
      dispatcher-url: ${{ steps.tf-outputs.outputs.dispatcher-url }}
      worker-url: ${{ steps.tf-outputs.outputs.worker-url }}
    env:
      TF_VAR_backend_image: ${{ needs.backend.outputs.backend-image }}
      TF_VAR_dispatcher_image: ${{ needs.dispatcher.outputs.dispatcher-image }}
      TF_VAR_worker_image: ${{ needs.worker.outputs.worker-image }}
      TF_VAR_frontend_image: ${{ needs.frontend.outputs.frontend-image }}
      TF_VAR_environment: ${{ github.event.inputs.environment || 'dev' }}
      TF_VAR_serper_api_key: ${{ secrets.SERPER_API_KEY }}
      TF_VAR_google_ai_api_key: ${{ secrets.GOOGLE_AI_API_KEY }}
      TF_VAR_scheduler_dispatcher_uri: ${{ vars.SCHEDULER_DISPATCHER_URI || '' }}
      TF_VAR_psa_prefix_length: ${{ vars.PSA_PREFIX_LENGTH || 16 }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Terraform Init
        run: |
          cd infrastructure
          terraform init -input=false

      - name: Terraform Plan
        run: |
          cd infrastructure
          terraform plan -input=false -out=tfplan

      - name: Terraform Apply
        run: |
          cd infrastructure
          terraform apply -input=false -auto-approve tfplan

      - name: Capture Terraform outputs
        id: tf-outputs
        run: |
          cd infrastructure
          BACKEND_URL=$(terraform output -raw backend_url)
          FRONTEND_URL=$(terraform output -raw frontend_url)
          DISPATCHER_URL=$(terraform output -raw dispatcher_url)
          WORKER_URL=$(terraform output -raw worker_url)
          echo "backend-url=$BACKEND_URL" >> $GITHUB_OUTPUT
          echo "frontend-url=$FRONTEND_URL" >> $GITHUB_OUTPUT
          echo "dispatcher-url=$DISPATCHER_URL" >> $GITHUB_OUTPUT
          echo "worker-url=$WORKER_URL" >> $GITHUB_OUTPUT

  verification:
    name: Post-Deployment Verification
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Check service health
        env:
          BACKEND_URL: ${{ needs.deploy.outputs.backend-url }}
          FRONTEND_URL: ${{ needs.deploy.outputs.frontend-url }}
          DISPATCHER_URL: ${{ needs.deploy.outputs.dispatcher-url }}
          WORKER_URL: ${{ needs.deploy.outputs.worker-url }}
        run: |
          echo "Frontend URL: $FRONTEND_URL"
          curl -fsS "$FRONTEND_URL" >/dev/null
          echo "Backend health check: $BACKEND_URL/health"
          curl -fsS "$BACKEND_URL/health" >/dev/null
          if [ -n "$DISPATCHER_URL" ]; then
            echo "Dispatcher smoke: $DISPATCHER_URL/dispatcher/dispatch"
            curl -fsS -X POST "$DISPATCHER_URL/dispatcher/dispatch" >/dev/null
          fi

      - name: Run API smoke tests
        env:
          BACKEND_URL: ${{ needs.deploy.outputs.backend-url }}
          FRONTEND_URL: ${{ needs.deploy.outputs.frontend-url }}
          DISPATCHER_URL: ${{ needs.deploy.outputs.dispatcher-url }}
          WORKER_URL: ${{ needs.deploy.outputs.worker-url }}
        run: |
          python -m pip install --upgrade pip
          pip install -r .github/scripts/requirements.txt
          python .github/scripts/test-api.py "$BACKEND_URL" "$FRONTEND_URL" "$DISPATCHER_URL" "$WORKER_URL"

      - name: Publish summary
        env:
          BACKEND_URL: ${{ needs.deploy.outputs.backend-url }}
          FRONTEND_URL: ${{ needs.deploy.outputs.frontend-url }}
          DISPATCHER_URL: ${{ needs.deploy.outputs.dispatcher-url }}
          WORKER_URL: ${{ needs.deploy.outputs.worker-url }}
        run: |
          {
            echo "## ✅ Deployment Verification"
            echo ""
            echo "- Backend: $BACKEND_URL"
            echo "- Frontend: $FRONTEND_URL"
            echo "- Dispatcher: $DISPATCHER_URL"
            echo "- Worker: $WORKER_URL"
          } >> $GITHUB_STEP_SUMMARY
