name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: dev
        type: choice
        options:
        - dev
        - staging
        - prod

env:
  PROJECT_ID: ${{ vars.PROJECT_ID || 'perplexity-clone-468820' }}
  REGION: ${{ vars.REGION || 'us-central1' }}
  ARTIFACT_REGISTRY: ${{ vars.REGION || 'us-central1' }}-docker.pkg.dev
  REPOSITORY_NAME: perplexity-clone-repository
  BACKEND_SERVICE: perplexity-clone-backend
  FRONTEND_SERVICE: perplexity-clone-frontend
  DISPATCHER_SERVICE: perplexity-clone-dispatcher
  WORKER_SERVICE: perplexity-clone-worker

permissions:
  contents: read
  actions: read
  packages: write
  id-token: write

jobs:
  backend-build:
    name: Backend Build
    runs-on: ubuntu-latest
    outputs:
      image_sha: ${{ steps.tags.outputs.sha }}
      image_latest: ${{ steps.tags.outputs.latest }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
      - name: Configure Artifact Registry auth
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet
      - name: Compute backend image tags
        id: tags
        env:
          ARTIFACT_REGISTRY: ${{ env.ARTIFACT_REGISTRY }}
          PROJECT_ID: ${{ env.PROJECT_ID }}
          REPOSITORY_NAME: ${{ env.REPOSITORY_NAME }}
        run: |
          SHA="${ARTIFACT_REGISTRY}/${PROJECT_ID}/${REPOSITORY_NAME}/backend:${GITHUB_SHA}"
          LATEST="${ARTIFACT_REGISTRY}/${PROJECT_ID}/${REPOSITORY_NAME}/backend:latest"
          echo "sha=$SHA" >> "$GITHUB_OUTPUT"
          echo "latest=$LATEST" >> "$GITHUB_OUTPUT"
      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          platforms: linux/amd64
          tags: |
            ${{ steps.tags.outputs.sha }}
            ${{ steps.tags.outputs.latest }}

  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: backend-build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run pytest suite
        run: |
          cd backend
          python -m pytest tests/ -v --tb=short

  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: backend-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: npm
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci --prefer-offline --no-audit
      - name: Run frontend unit tests
        run: |
          cd frontend
          npm test -- --watch=false

  frontend-build:
    name: Frontend Build
    runs-on: ubuntu-latest
    needs:
      - backend-test
      - frontend-test
    outputs:
      image_sha: ${{ steps.tags.outputs.sha }}
      image_latest: ${{ steps.tags.outputs.latest }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: npm
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci --prefer-offline --no-audit
      - name: Build frontend bundle
        run: |
          cd frontend
          npm run build
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
      - name: Configure Artifact Registry auth
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet
      - name: Resolve backend URL for build
        id: backend-url
        run: |
          gcloud config set run/region ${{ env.REGION }} --quiet
          URL=$(gcloud run services describe ${{ env.BACKEND_SERVICE }} --region=${{ env.REGION }} --format="value(status.url)" 2>/dev/null || echo "https://placeholder-backend-url.run.app")
          echo "value=$URL" >> "$GITHUB_OUTPUT"
      - name: Compute frontend image tags
        id: tags
        env:
          ARTIFACT_REGISTRY: ${{ env.ARTIFACT_REGISTRY }}
          PROJECT_ID: ${{ env.PROJECT_ID }}
          REPOSITORY_NAME: ${{ env.REPOSITORY_NAME }}
        run: |
          SHA="${ARTIFACT_REGISTRY}/${PROJECT_ID}/${REPOSITORY_NAME}/frontend:${GITHUB_SHA}"
          LATEST="${ARTIFACT_REGISTRY}/${PROJECT_ID}/${REPOSITORY_NAME}/frontend:latest"
          echo "sha=$SHA" >> "$GITHUB_OUTPUT"
          echo "latest=$LATEST" >> "$GITHUB_OUTPUT"
      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          platforms: linux/amd64
          build-args: |
            NEXT_PUBLIC_API_URL=${{ steps.backend-url.outputs.value }}
          tags: |
            ${{ steps.tags.outputs.sha }}
            ${{ steps.tags.outputs.latest }}

  worker-build:
    name: Worker Build
    runs-on: ubuntu-latest
    needs: backend-test
    outputs:
      image_sha: ${{ steps.tags.outputs.sha }}
      image_latest: ${{ steps.tags.outputs.latest }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
