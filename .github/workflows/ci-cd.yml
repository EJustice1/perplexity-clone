name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod

env:
  PROJECT_ID: perplexity-clone-468820
  REGION: us-central1
  BACKEND_SERVICE: perplexity-clone-backend
  FRONTEND_SERVICE: perplexity-clone-frontend

jobs:
  # Backend CI/CD
  backend:
    name: Backend CI/CD
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install Python dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx
        
    - name: Run backend tests
      run: |
        cd backend
        python -m pytest tests/ -v --tb=short
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Google Auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}
        
    - name: Configure Docker for GCR
      run: |
        gcloud auth configure-docker gcr.io --quiet
        
    - name: Build and push backend image
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        push: true
        platforms: linux/amd64
        tags: |
          gcr.io/${{ env.PROJECT_ID }}/${{ env.BACKEND_SERVICE }}:${{ github.sha }}
          gcr.io/${{ env.PROJECT_ID }}/${{ env.BACKEND_SERVICE }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Deploy backend to Cloud Run
      if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
      run: |
        gcloud run deploy ${{ env.BACKEND_SERVICE }} \
          --image gcr.io/${{ env.PROJECT_ID }}/${{ env.BACKEND_SERVICE }}:${{ github.sha }} \
          --platform managed \
          --region ${{ env.REGION }} \
          --allow-unauthenticated \
          --memory 1Gi \
          --cpu 1 \
          --max-instances 10 \
          --set-env-vars "ENVIRONMENT=${{ github.event.inputs.environment || 'dev' }}"

  # Frontend CI/CD
  frontend:
    name: Frontend CI/CD
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Run frontend tests
      run: |
        cd frontend
        npm run test --if-present
        npm run lint --if-present
        
    - name: Build frontend
      run: |
        cd frontend
        npm run build
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Google Auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}
        
    - name: Configure Docker for GCR
      run: |
        gcloud auth configure-docker gcr.io --quiet
        
    - name: Get backend URL
      id: backend-url
      if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
      run: |
        gcloud config set run/region ${{ env.REGION }}
        
        BACKEND_URL=$(gcloud run services describe ${{ env.BACKEND_SERVICE }} --region=${{ env.REGION }} --format="value(status.url)")
        echo "backend-url=$BACKEND_URL" >> $GITHUB_OUTPUT
        
    - name: Build and push frontend image
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        push: true
        platforms: linux/amd64
        build-args: |
          NEXT_PUBLIC_API_URL=${{ steps.backend-url.outputs.backend-url }}
        tags: |
          gcr.io/${{ env.PROJECT_ID }}/${{ env.FRONTEND_SERVICE }}:${{ github.sha }}
          gcr.io/${{ env.PROJECT_ID }}/${{ env.FRONTEND_SERVICE }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Deploy frontend to Cloud Run
      if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
      run: |
        gcloud run deploy ${{ env.FRONTEND_SERVICE }} \
          --image gcr.io/${{ env.PROJECT_ID }}/${{ env.FRONTEND_SERVICE }}:${{ github.sha }} \
          --platform managed \
          --region ${{ env.REGION }} \
          --allow-unauthenticated \
          --memory 2Gi \
          --cpu 1 \
          --max-instances 10 \
          --set-env-vars "NEXT_PUBLIC_API_URL=${{ steps.backend-url.outputs.backend-url }}"

  # Infrastructure deployment
  infrastructure:
    name: Infrastructure Deployment
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.7"
        
    - name: Google Auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}
        
    - name: Terraform Init
      run: |
        cd infrastructure
        terraform init
        
    - name: Terraform Plan
      run: |
        cd infrastructure
        terraform plan -var="backend_image=gcr.io/${{ env.PROJECT_ID }}/${{ env.BACKEND_SERVICE }}:${{ github.sha }}" \
                      -var="frontend_image=gcr.io/${{ env.PROJECT_ID }}/${{ env.FRONTEND_SERVICE }}:${{ github.sha }}" \
                      -var="environment=${{ github.event.inputs.environment || 'dev' }}"
        
    - name: Terraform Apply
      run: |
        cd infrastructure
        terraform apply -auto-approve \
                      -var="backend_image=gcr.io/${{ env.PROJECT_ID }}/${{ env.BACKEND_SERVICE }}:${{ github.sha }}" \
                      -var="frontend_image=gcr.io/${{ env.PROJECT_ID }}/${{ env.FRONTEND_SERVICE }}:${{ github.sha }}" \
                      -var="environment=${{ github.event.inputs.environment || 'dev' }}"

  # Post-deployment verification
  verification:
    name: Post-Deployment Verification
    runs-on: ubuntu-latest
    needs: [infrastructure]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Google Auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}
        
    - name: Get service URLs
      id: service-urls
      run: |
        gcloud config set run/region ${{ env.REGION }}
        
        BACKEND_URL=$(gcloud run services describe ${{ env.BACKEND_SERVICE }} --region=${{ env.REGION }} --format="value(status.url)")
        FRONTEND_URL=$(gcloud run services describe ${{ env.FRONTEND_SERVICE }} --region=${{ env.REGION }} --format="value(status.url)")
        
        echo "backend-url=$BACKEND_URL" >> $GITHUB_OUTPUT
        echo "frontend-url=$FRONTEND_URL" >> $GITHUB_OUTPUT
        
    - name: Test backend health
      run: |
        BACKEND_URL="${{ steps.service-urls.outputs.backend-url }}"
        echo "Testing backend health at: $BACKEND_URL"
        
        # Wait for service to be ready
        sleep 30
        
        # Test health endpoint
        curl -f "$BACKEND_URL/api/v1/health" || exit 1
        
    - name: Test frontend accessibility
      run: |
        FRONTEND_URL="${{ steps.service-urls.outputs.frontend-url }}"
        echo "Testing frontend at: $FRONTEND_URL"
        
        # Wait for service to be ready
        sleep 30
        
        # Test frontend loads
        curl -f "$FRONTEND_URL" || exit 1
        
    - name: Create deployment summary
      run: |
        echo "## ðŸš€ Deployment Successful!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Backend Service:** ${{ steps.service-urls.outputs.backend-url }}" >> $GITHUB_STEP_SUMMARY
        echo "**Frontend Service:** ${{ steps.service-urls.outputs.frontend-url }}" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** ${{ github.event.inputs.environment || 'dev' }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "All services deployed and verified successfully! âœ…" >> $GITHUB_STEP_SUMMARY
